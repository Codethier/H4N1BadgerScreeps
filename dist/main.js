"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});function t(){let e="Harvester"+Game.time;Game.spawns.Spawn1.spawnCreep([WORK,CARRY,MOVE],e,{memory:{role:"harvester"}})}function s(e){return e.pos.findClosestByPath(e.room.find(FIND_SOURCES))}function n(e){if(e.store.getFreeCapacity()>0){let r=s(e);return r?e.harvest(r)==ERR_NOT_IN_RANGE?(e.moveTo(r),"moving to mine"):"harvesting":e.transfer(Game.spawns.Spawn1,RESOURCE_ENERGY)==ERR_NOT_IN_RANGE?(e.moveTo(Game.spawns.Spawn1),"moving to spawn"):"transferring"}else return"idle"}function a(e){e.store.getUsedCapacity()>0&&e.upgradeController(e.room.controller)==ERR_NOT_IN_RANGE&&e.moveTo(e.room.controller)}function l(e){n(e)==="idle"&&a(e)}const i=require("lodash");let m={harvestersTarget:4,harvesterLevels:{lvl1:[WORK,CARRY,MOVE],lvl2:[WORK,WORK,CARRY,CARRY,MOVE]},buildersTarget:2};function R(){let e=i.filter(Game.creeps,o=>o.memory.role==="harvester");console.log("Harvesters: "+e.length),e.length<m.harvestersTarget&&t();for(var r in Memory.creeps)Game.creeps[r]||(delete Memory.creeps[r],console.log("Clearing non-existing creep memory:",r));for(let o in Game.creeps)Game.creeps[o].memory.role==="harvester"&&l(Game.creeps[o])}exports.loop=R;
